#!/usr/bin/env python3

# user_bot —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import os
import datetime
import telebot
from telebot import types
import configparser
from configparser import ConfigParser
import mysql.connector
import logging
import re
import csv

def get_current_time():
    return datetime.datetime.now().strftime("[%d.%m.%Y %H:%M:%S]")
current_time = get_current_time()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è configured
configured = 0

config_file = 'userbot.ini'
config = ConfigParser()
config.read(config_file)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ü–∏–∏ 'start' –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
if 'start' in config:
    configured = config.getboolean('start', 'configured')

if not configured:
    create_file = input('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª? (–¥–∞/–Ω–µ—Ç): ')
    if create_file.lower() in ['–¥–∞', '–¥', 'yes', 'y']:
        bot_token = input('–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –í–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ Enter –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è): ') or ''

        adm_bot_config = ConfigParser()
        adm_bot_config.read('config.ini')
        mysql_config = adm_bot_config['mysql']

        with open(config_file, 'w') as file:
            file.write(f"""[start]
configured = 0

[telegram]
bot_token = {bot_token}

[mysql]
host = {mysql_config['host']}
user = {mysql_config['user']}
password = {mysql_config['password']}
database = {mysql_config['database']}
""")
        print(f'{get_current_time()} –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_file}.')
        # –ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
        config.read(config_file)
    else:
        print(f'{get_current_time()} –ù–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω.')
        print(f'{get_current_time()} –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
        exit()

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

try:
    conn = mysql.connector.connect(
        host=config['mysql']['host'],
        user=config['mysql']['user'],
        password=config['mysql']['password'],
        database=config['mysql']['database']
    )
    print(f"{get_current_time()} –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.")
except mysql.connector.Error as e:
    print(f"{get_current_time()} –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    exit()

cursor = conn.cursor()
table_name_tasks = "tasks"

try:
    cursor.execute(f"SELECT * FROM {table_name_tasks}")
    results = cursor.fetchall()  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
except mysql.connector.Error as e:
    print(f"{get_current_time()} –¢–∞–±–ª–∏—Ü–∞ {table_name_tasks} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û—à–∏–±–∫–∞: {e}")
    create_table = input("–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É 'tasks'? (–¥–∞/–Ω–µ—Ç): ")
    if create_table.lower() in ['–¥–∞', '–¥', 'yes', 'y']:
        try:
            cursor.execute(f"""CREATE TABLE {table_name_tasks} (
                                task_id INT AUTO_INCREMENT PRIMARY KEY,
                                receiver VARCHAR(255),
                                status ENUM('new', 'in_progress', 'completed', 'canceled') NOT NULL DEFAULT 'new',
                                name VARCHAR(255),
                                function VARCHAR(255),
                                office VARCHAR(255),
                                email VARCHAR(255),
                                chat_id VARCHAR(20),
                                flags VARCHAR(255),
                                comment TEXT,
                                target TEXT
                            )""")
            print(f"{get_current_time()} –¢–∞–±–ª–∏—Ü–∞ 'tasks' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
        except mysql.connector.Error as e:
            print(f"{get_current_time()} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
            exit()
    else:
        print(f"{get_current_time()} –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        exit()

config.set('start', 'configured', '1')
with open(config_file, 'w') as configfile:
    config.write(configfile)

print(f"{get_current_time()} –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

# –ó–∞–∫—Ä—ã—Ç–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
cursor.close()
conn.close()

bot_token = config['telegram']['bot_token']
bot = telebot.TeleBot(bot_token)

@bot.message_handler(commands=['start'])
def start_command(message):
    chat_id = message.chat.id
    db_cursor.execute("SELECT * FROM users WHERE user_chat_id = %s", (chat_id,))
    user = db_cursor.fetchone()

    if user:
        bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        bot.send_message(chat_id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ:")
        bot.register_next_step_handler(message, process_user_name)

def process_user_name(message):
    user_name = message.text
    pattern = r'^[–ê-–Ø][–∞-—è]{1,20} [–ê-–Ø][–∞-—è]{1,20} (?:[–ê-–Ø][–∞-—è]{1,20}–≤–Ω–∞|[–ê-–Ø][–∞-—è]{1,20}–≤–∏—á)$'
    if not re.match(pattern, user_name):
        bot.send_message(message.chat.id, "‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–∞–º–∏–ª–∏–∏ –ò–º–µ–Ω–∏ –û—Ç—á–µ—Å—Ç–≤–∞!")
        bot.register_next_step_handler(message, process_user_name)
        return
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=create_offices_keyboard())
    bot.register_next_step_handler(message, process_user_office, user_name)

def process_user_office(message, user_name):
    user_office = message.text
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=create_functions_keyboard())
    bot.register_next_step_handler(message, process_user_function, user_name, user_office)

def process_user_function(message, user_name, user_office):
    user_function = message.text
    user_info = f"–ò–º—è: {user_name}\n–û—Ñ–∏—Å: {user_office}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user_function}"
    bot.send_message(message.chat.id, f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n{user_info}\n\n", reply_markup=create_actions_keyboard())
    bot.register_next_step_handler(message, process_user_confirmation, user_name, user_office, user_function)

def process_user_confirmation(message, user_name, user_office, user_function):
    if message.text == "/save_user":
        save_new_user_task(message, user_name, user_office, user_function)
    elif message.text == "/cancel":
        bot.send_message(message.chat.id, "üöß –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ üöß")
    else:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

def save_new_user_task(message, user_name, user_office, user_function):
    chat_id = message.chat.id
    db_cursor.execute("INSERT INTO tasks (receiver, status, name, function, office, chat_id) VALUES (%s, %s, %s, %s, %s, %s)", ('adm_bot', 'new', user_name, user_function, user_office, chat_id))
    db_connection.commit()
    bot.send_message(chat_id, "‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

bot.polling()